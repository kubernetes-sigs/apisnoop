[
    {
        "tests": [
            null
        ],
        "endpoint": "createResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "createResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "createResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "createResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            }
        ],
        "endpoint": "createStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1CollectionDeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1CollectionNamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1CollectionNamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1CollectionResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "deleteResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CollectionVolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "getResourceV1APIResources",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1ResourceClaimForAllNamespaces",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1ResourceClaimTemplateForAllNamespaces",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "listResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "listStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchResourceV1NamespacedResourceClaimStatus",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            }
        ],
        "endpoint": "patchStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readResourceV1NamespacedResourceClaimStatus",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            }
        ],
        "endpoint": "readStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceResourceV1DeviceClass",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceResourceV1NamespacedResourceClaim",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceResourceV1NamespacedResourceClaimStatus",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceResourceV1NamespacedResourceClaimTemplate",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceResourceV1ResourceSlice",
        "tested_release": null,
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "replaceStorageV1VolumeAttributesClass",
        "tested_release": "1.35.0",
        "promotion_release": "1.34.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            null
        ],
        "endpoint": "createNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            }
        ],
        "endpoint": "deleteNetworkingV1CollectionIPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            null
        ],
        "endpoint": "deleteNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            null
        ],
        "endpoint": "listNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            null
        ],
        "endpoint": "listNetworkingV1ServiceCIDR",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            }
        ],
        "endpoint": "patchNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            }
        ],
        "endpoint": "readNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            null
        ],
        "endpoint": "readNetworkingV1ServiceCIDR",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            }
        ],
        "endpoint": "readNetworkingV1ServiceCIDRStatus",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            }
        ],
        "endpoint": "replaceNetworkingV1IPAddress",
        "tested_release": "1.34.0",
        "promotion_release": "1.33.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "patchCoreV1NamespacedPodResize",
        "tested_release": null,
        "promotion_release": "1.32.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "readCoreV1NamespacedPodResize",
        "tested_release": null,
        "promotion_release": "1.32.0"
    },
    {
        "tests": [
            null
        ],
        "endpoint": "replaceCoreV1NamespacedPodResize",
        "tested_release": null,
        "promotion_release": "1.32.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            null
        ],
        "endpoint": "createAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            null
        ],
        "endpoint": "createAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            null
        ],
        "endpoint": "deleteAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            null
        ],
        "endpoint": "deleteAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            null
        ],
        "endpoint": "listAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            null
        ],
        "endpoint": "listAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            null
        ],
        "endpoint": "patchAdmissionregistrationV1ValidatingAdmissionPolicyStatus",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            null
        ],
        "endpoint": "readAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            }
        ],
        "endpoint": "readAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            }
        ],
        "endpoint": "readAdmissionregistrationV1ValidatingAdmissionPolicyStatus",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1ValidatingAdmissionPolicy",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1ValidatingAdmissionPolicyBinding",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1ValidatingAdmissionPolicyStatus",
        "tested_release": "1.30.0",
        "promotion_release": "1.30.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            null
        ],
        "endpoint": "createFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            null
        ],
        "endpoint": "createFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            }
        ],
        "endpoint": "deleteFlowcontrolApiserverV1CollectionFlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "deleteFlowcontrolApiserverV1CollectionPriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            null
        ],
        "endpoint": "deleteFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            null
        ],
        "endpoint": "deleteFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            null
        ],
        "endpoint": "getFlowcontrolApiserverV1APIResources",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            null
        ],
        "endpoint": "listFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            null
        ],
        "endpoint": "listFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            }
        ],
        "endpoint": "patchFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            null
        ],
        "endpoint": "patchFlowcontrolApiserverV1FlowSchemaStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "patchFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "patchFlowcontrolApiserverV1PriorityLevelConfigurationStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            null
        ],
        "endpoint": "readFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            }
        ],
        "endpoint": "readFlowcontrolApiserverV1FlowSchemaStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "readFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "readFlowcontrolApiserverV1PriorityLevelConfigurationStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            }
        ],
        "endpoint": "replaceFlowcontrolApiserverV1FlowSchema",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            }
        ],
        "endpoint": "replaceFlowcontrolApiserverV1FlowSchemaStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "replaceFlowcontrolApiserverV1PriorityLevelConfiguration",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.29.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "createStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "deleteStorageV1CollectionNamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "deleteStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "listStorageV1CSIStorageCapacityForAllNamespaces",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "listStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            }
        ],
        "endpoint": "patchStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            }
        ],
        "endpoint": "readStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            }
        ],
        "endpoint": "replaceStorageV1NamespacedCSIStorageCapacity",
        "tested_release": "1.24.0",
        "promotion_release": "1.24.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedService",
        "tested_release": "1.23.0",
        "promotion_release": "1.23.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getAutoscalingV2APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.23.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "createBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            null
        ],
        "endpoint": "createDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            null
        ],
        "endpoint": "createPolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "deleteBatchV1CollectionNamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "deleteBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "deleteDiscoveryV1CollectionNamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "deleteDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            null
        ],
        "endpoint": "deletePolicyV1CollectionNamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            }
        ],
        "endpoint": "deletePolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "getDiscoveryV1APIResources",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getPolicyV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "listBatchV1CronJobForAllNamespaces",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "listBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "listDiscoveryV1EndpointSliceForAllNamespaces",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            null
        ],
        "endpoint": "listDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            null
        ],
        "endpoint": "listPolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            null
        ],
        "endpoint": "listPolicyV1PodDisruptionBudgetForAllNamespaces",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            }
        ],
        "endpoint": "patchBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            }
        ],
        "endpoint": "patchBatchV1NamespacedCronJobStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedPodEphemeralcontainers",
        "tested_release": "1.25.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            }
        ],
        "endpoint": "patchDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            }
        ],
        "endpoint": "patchPolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            }
        ],
        "endpoint": "patchPolicyV1NamespacedPodDisruptionBudgetStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "readBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            }
        ],
        "endpoint": "readBatchV1NamespacedCronJobStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            }
        ],
        "endpoint": "readCoreV1NamespacedPodEphemeralcontainers",
        "tested_release": "1.28.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "readDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            null
        ],
        "endpoint": "readPolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            }
        ],
        "endpoint": "readPolicyV1NamespacedPodDisruptionBudgetStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            }
        ],
        "endpoint": "replaceBatchV1NamespacedCronJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            null
        ],
        "endpoint": "replaceBatchV1NamespacedCronJobStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedPodEphemeralcontainers",
        "tested_release": "1.28.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            null
        ],
        "endpoint": "replaceDiscoveryV1NamespacedEndpointSlice",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            }
        ],
        "endpoint": "replacePolicyV1NamespacedPodDisruptionBudget",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            null
        ],
        "endpoint": "replacePolicyV1NamespacedPodDisruptionBudgetStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.21.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            null
        ],
        "endpoint": "createNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            }
        ],
        "endpoint": "deleteNodeV1CollectionRuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            }
        ],
        "endpoint": "deleteNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            null
        ],
        "endpoint": "getNodeV1APIResources",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            null
        ],
        "endpoint": "listNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            }
        ],
        "endpoint": "patchNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            null
        ],
        "endpoint": "readNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            }
        ],
        "endpoint": "replaceNodeV1RuntimeClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.20.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "createCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            null
        ],
        "endpoint": "createEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "createNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "createNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "deleteCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "deleteCertificatesV1CollectionCertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            null
        ],
        "endpoint": "deleteEventsV1CollectionNamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "deleteEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "deleteNetworkingV1CollectionIngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "deleteNetworkingV1CollectionNamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "deleteNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "deleteNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "getCertificatesV1APIResources",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getEventsV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "listCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "listEventsV1EventForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            null
        ],
        "endpoint": "listEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            null
        ],
        "endpoint": "listNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "listNetworkingV1IngressForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "listNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "patchCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "patchEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "patchNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "patchNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "patchNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "readCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "readEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "readNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "readNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "readNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequest",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequestApproval",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            null
        ],
        "endpoint": "replaceCertificatesV1CertificateSigningRequestStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            }
        ],
        "endpoint": "replaceEventsV1NamespacedEvent",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            }
        ],
        "endpoint": "replaceNetworkingV1IngressClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "replaceNetworkingV1NamespacedIngress",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            }
        ],
        "endpoint": "replaceNetworkingV1NamespacedIngressStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.19.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            null
        ],
        "endpoint": "createStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CollectionCSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            null
        ],
        "endpoint": "deleteStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            null
        ],
        "endpoint": "listStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            }
        ],
        "endpoint": "patchStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            null
        ],
        "endpoint": "readStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            null
        ],
        "endpoint": "replaceStorageV1CSIDriver",
        "tested_release": "1.28.0",
        "promotion_release": "1.18.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            null
        ],
        "endpoint": "createStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CollectionCSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            }
        ],
        "endpoint": "getFlowcontrolApiserverAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            null
        ],
        "endpoint": "listStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            }
        ],
        "endpoint": "patchStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            null
        ],
        "endpoint": "readStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            null
        ],
        "endpoint": "replaceStorageV1CSINode",
        "tested_release": "1.32.0",
        "promotion_release": "1.17.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            null
        ],
        "endpoint": "createAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            }
        ],
        "endpoint": "createAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            null
        ],
        "endpoint": "createApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedServiceAccountToken",
        "tested_release": "1.32.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            }
        ],
        "endpoint": "deleteAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            }
        ],
        "endpoint": "deleteApiextensionsV1CollectionCustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            null
        ],
        "endpoint": "deleteApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            null
        ],
        "endpoint": "getAdmissionregistrationV1APIResources",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getApiextensionsV1APIResources",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            }
        ],
        "endpoint": "getDiscoveryAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            null
        ],
        "endpoint": "listAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            null
        ],
        "endpoint": "listAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            null
        ],
        "endpoint": "listApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            }
        ],
        "endpoint": "patchAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            null
        ],
        "endpoint": "patchApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            }
        ],
        "endpoint": "patchApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            null
        ],
        "endpoint": "readAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            }
        ],
        "endpoint": "readAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            null
        ],
        "endpoint": "readApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            }
        ],
        "endpoint": "readApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1MutatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            }
        ],
        "endpoint": "replaceAdmissionregistrationV1ValidatingWebhookConfiguration",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            null
        ],
        "endpoint": "replaceApiextensionsV1CustomResourceDefinition",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            null
        ],
        "endpoint": "replaceApiextensionsV1CustomResourceDefinitionStatus",
        "tested_release": "1.16.0",
        "promotion_release": "1.16.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "createCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "createSchedulingV1PriorityClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "deleteCoordinationV1CollectionNamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "deleteCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "deleteSchedulingV1CollectionPriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "deleteSchedulingV1PriorityClass",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getCoordinationV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            }
        ],
        "endpoint": "getNodeAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getSchedulingV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "listCoordinationV1LeaseForAllNamespaces",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "listCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            null
        ],
        "endpoint": "listSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            }
        ],
        "endpoint": "patchCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "patchSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "readCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            null
        ],
        "endpoint": "readSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            null
        ],
        "endpoint": "replaceCoordinationV1NamespacedLease",
        "tested_release": "1.17.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            }
        ],
        "endpoint": "replaceSchedulingV1PriorityClass",
        "tested_release": "1.20.0",
        "promotion_release": "1.14.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "createStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CollectionVolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "deleteStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "listStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "patchStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "patchStorageV1VolumeAttachmentStatus",
        "tested_release": "1.32.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            null
        ],
        "endpoint": "readStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            }
        ],
        "endpoint": "readStorageV1VolumeAttachmentStatus",
        "tested_release": "1.32.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            }
        ],
        "endpoint": "replaceStorageV1VolumeAttachment",
        "tested_release": "1.30.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            }
        ],
        "endpoint": "replaceStorageV1VolumeAttachmentStatus",
        "tested_release": "1.32.0",
        "promotion_release": "1.13.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getCoordinationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.12.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "patchApiregistrationV1APIServiceStatus",
        "tested_release": "1.27.0",
        "promotion_release": "1.11.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "readApiregistrationV1APIServiceStatus",
        "tested_release": "1.27.0",
        "promotion_release": "1.11.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "createApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "deleteApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "deleteApiregistrationV1CollectionAPIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getApiregistrationV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "listApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "patchApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "readApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            }
        ],
        "endpoint": "replaceApiregistrationV1APIService",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "replaceApiregistrationV1APIServiceStatus",
        "tested_release": "1.27.0",
        "promotion_release": "1.10.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "createAppsV1NamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "createAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            null
        ],
        "endpoint": "createAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            null
        ],
        "endpoint": "createAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            null
        ],
        "endpoint": "createAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "deleteAppsV1CollectionNamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            null
        ],
        "endpoint": "deleteAppsV1CollectionNamespacedDaemonSet",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            null
        ],
        "endpoint": "deleteAppsV1CollectionNamespacedDeployment",
        "tested_release": "1.20.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            null
        ],
        "endpoint": "deleteAppsV1CollectionNamespacedReplicaSet",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            null
        ],
        "endpoint": "deleteAppsV1CollectionNamespacedStatefulSet",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "deleteAppsV1NamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            }
        ],
        "endpoint": "deleteAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            null
        ],
        "endpoint": "deleteAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            null
        ],
        "endpoint": "deleteAppsV1NamespacedReplicaSet",
        "tested_release": "1.16.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            null
        ],
        "endpoint": "deleteAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getAppsV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getEventsAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "listAppsV1ControllerRevisionForAllNamespaces",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1DaemonSetForAllNamespaces",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1DeploymentForAllNamespaces",
        "tested_release": "1.20.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            null
        ],
        "endpoint": "listAppsV1NamespacedControllerRevision",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            null
        ],
        "endpoint": "listAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            null
        ],
        "endpoint": "listAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1ReplicaSetForAllNamespaces",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            null
        ],
        "endpoint": "listAppsV1StatefulSetForAllNamespaces",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            }
        ],
        "endpoint": "patchAppsV1NamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            null
        ],
        "endpoint": "patchAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedDaemonSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            null
        ],
        "endpoint": "patchAppsV1NamespacedDeployment",
        "tested_release": "1.20.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            null
        ],
        "endpoint": "patchAppsV1NamespacedDeploymentScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedDeploymentStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            null
        ],
        "endpoint": "patchAppsV1NamespacedReplicaSet",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedReplicaSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedReplicaSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedStatefulSet",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            }
        ],
        "endpoint": "patchAppsV1NamespacedStatefulSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            }
        ],
        "endpoint": "patchAppsV1NamespacedStatefulSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            }
        ],
        "endpoint": "readAppsV1NamespacedDaemonSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedDeployment",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedDeploymentScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            }
        ],
        "endpoint": "readAppsV1NamespacedDeploymentStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedReplicaSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            }
        ],
        "endpoint": "readAppsV1NamespacedReplicaSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            }
        ],
        "endpoint": "readAppsV1NamespacedReplicaSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            null
        ],
        "endpoint": "readAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            }
        ],
        "endpoint": "readAppsV1NamespacedStatefulSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            }
        ],
        "endpoint": "readAppsV1NamespacedStatefulSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedControllerRevision",
        "tested_release": "1.25.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedDaemonSet",
        "tested_release": "1.10.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedDaemonSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedDeployment",
        "tested_release": "1.12.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedDeploymentScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedDeploymentStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedReplicaSet",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedReplicaSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedReplicaSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedStatefulSet",
        "tested_release": "1.9.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            }
        ],
        "endpoint": "replaceAppsV1NamespacedStatefulSetScale",
        "tested_release": "1.21.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            null
        ],
        "endpoint": "replaceAppsV1NamespacedStatefulSetStatus",
        "tested_release": "1.22.0",
        "promotion_release": "1.9.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedPodBinding",
        "tested_release": "1.19.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedPodEviction",
        "tested_release": "1.22.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getApiextensionsAPIGroup",
        "tested_release": "1.16.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getSchedulingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedReplicationControllerScale",
        "tested_release": "1.20.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedReplicationControllerScale",
        "tested_release": "1.26.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedReplicationControllerScale",
        "tested_release": "1.26.0",
        "promotion_release": "1.8.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PatchNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PatchNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PatchNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PatchNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            }
        ],
        "endpoint": "getAdmissionregistrationAPIGroup",
        "tested_release": "1.16.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getApiregistrationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "getNetworkingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            null
        ],
        "endpoint": "getNetworkingV1APIResources",
        "tested_release": "1.19.0",
        "promotion_release": "1.7.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            null
        ],
        "endpoint": "createAuthenticationV1TokenReview",
        "tested_release": "1.9.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            }
        ],
        "endpoint": "createAuthorizationV1NamespacedLocalSubjectAccessReview",
        "tested_release": "1.27.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            }
        ],
        "endpoint": "createAuthorizationV1SelfSubjectAccessReview",
        "tested_release": "1.16.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            null
        ],
        "endpoint": "createAuthorizationV1SubjectAccessReview",
        "tested_release": "1.27.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            null
        ],
        "endpoint": "createStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            }
        ],
        "endpoint": "deleteStorageV1CollectionStorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            null
        ],
        "endpoint": "deleteStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getAuthenticationV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getAuthorizationV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "getStorageV1APIResources",
        "tested_release": "1.24.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            null
        ],
        "endpoint": "listStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            }
        ],
        "endpoint": "patchStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            null
        ],
        "endpoint": "readStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            }
        ],
        "endpoint": "replaceStorageV1StorageClass",
        "tested_release": "1.29.0",
        "promotion_release": "1.6.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1DeleteNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1DeleteNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1DeleteNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1DeleteNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            null
        ],
        "endpoint": "connectCoreV1GetNamespacedPodExec",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            null
        ],
        "endpoint": "connectCoreV1GetNamespacedPodProxy",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            null
        ],
        "endpoint": "connectCoreV1GetNamespacedPodProxyWithPath",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            }
        ],
        "endpoint": "connectCoreV1GetNamespacedServiceProxy",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1GetNamespacedServiceProxyWithPath",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1HeadNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1HeadNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1HeadNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1HeadNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1OptionsNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1OptionsNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1OptionsNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1OptionsNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PostNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PostNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PostNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PostNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PutNamespacedPodProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PutNamespacedPodProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            }
        ],
        "endpoint": "connectCoreV1PutNamespacedServiceProxy",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            }
        ],
        "endpoint": "connectCoreV1PutNamespacedServiceProxyWithPath",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            null
        ],
        "endpoint": "createBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/architecture/conformance.go",
                "release": "1.23.0",
                "codename": "[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]",
                "testname": "Conformance tests minimum number of nodes."
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "createCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedResourceQuota",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            null
        ],
        "endpoint": "createCoreV1NamespacedServiceAccount",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            null
        ],
        "endpoint": "createCoreV1Node",
        "tested_release": "1.32.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "createCoreV1PersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            null
        ],
        "endpoint": "deleteBatchV1CollectionNamespacedJob",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            null
        ],
        "endpoint": "deleteBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedConfigMap",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedEvent",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedLimitRange",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedPod",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedReplicationController",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedResourceQuota",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedSecret",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            null
        ],
        "endpoint": "deleteCoreV1CollectionNamespacedServiceAccount",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1CollectionPersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/architecture/conformance.go",
                "release": "1.23.0",
                "codename": "[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]",
                "testname": "Conformance tests minimum number of nodes."
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedEndpoints",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedEvent",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            }
        ],
        "endpoint": "deleteCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            null
        ],
        "endpoint": "deleteCoreV1NamespacedServiceAccount",
        "tested_release": "1.27.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            }
        ],
        "endpoint": "deleteCoreV1Node",
        "tested_release": "1.32.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "deleteCoreV1PersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "getAPIVersions",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAppsAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            null
        ],
        "endpoint": "getAuthenticationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAuthorizationAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getAutoscalingAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getAutoscalingV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getBatchAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getBatchV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            }
        ],
        "endpoint": "getCertificatesAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            null
        ],
        "endpoint": "getCodeVersion",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            null
        ],
        "endpoint": "getCoreAPIVersions",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            null
        ],
        "endpoint": "getCoreV1APIResources",
        "tested_release": "1.28.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            }
        ],
        "endpoint": "getPolicyAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            }
        ],
        "endpoint": "getStorageAPIGroup",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            null
        ],
        "endpoint": "listBatchV1JobForAllNamespaces",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            null
        ],
        "endpoint": "listBatchV1NamespacedJob",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1ConfigMapForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1EndpointsForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            null
        ],
        "endpoint": "listCoreV1EventForAllNamespaces",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            null
        ],
        "endpoint": "listCoreV1LimitRangeForAllNamespaces",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "listCoreV1Namespace",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/architecture/conformance.go",
                "release": "1.23.0",
                "codename": "[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]",
                "testname": "Conformance tests minimum number of nodes."
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedEvent",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedSecret",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedService",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/architecture/conformance.go",
                "release": "1.23.0",
                "codename": "[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]",
                "testname": "Conformance tests minimum number of nodes."
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1NamespacedServiceAccount",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface [Conformance]",
                "testname": "Aggregated Discovery Interface"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support aggregated discovery interface for CRDs [Conformance]",
                "testname": "Aggregated Discovery Interface CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery endpoint Accept headers [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers"
            },
            {
                "file": "test/e2e/apimachinery/aggregated_discovery.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] AggregatedDiscovery should support raw aggregated discovery request for CRDs [Conformance]",
                "testname": "Aggregated Discovery Endpoint Accept Headers CRDs"
            },
            {
                "file": "test/e2e/apimachinery/aggregator.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]",
                "testname": "aggregator-supports-the-sample-apiserver"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance]",
                "testname": "API Chunking, server should return chunks of results for list calls"
            },
            {
                "file": "test/e2e/apimachinery/chunking.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance]",
                "testname": "API Chunking, server should support continue listing from the last key even if the original version has been compacted away"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, convert mixed version list"
            },
            {
                "file": "test/e2e/apimachinery/crd_conversion_webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]",
                "testname": "Custom Resource Definition Conversion Webhook, conversion custom resource"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, stop serving version"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, version rename"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields at root"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in embedded object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with x-kubernetes-preserve-unknown-fields in object"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying groups"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying kinds"
            },
            {
                "file": "test/e2e/apimachinery/crd_publish_openapi.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]",
                "testname": "Custom Resource OpenAPI Publish, varying versions"
            },
            {
                "file": "test/e2e/apimachinery/crd_selectable_fields.go",
                "release": "1.32.0",
                "codename": "[sig-api-machinery] CustomResourceFieldSelectors [Privileged:ClusterAdmin] CustomResourceFieldSelectors MUST list and watch custom resources matching the field selector [Conformance]",
                "testname": "custom-resource-definition-field-selectors-list-watch-register-informers"
            },
            {
                "file": "test/e2e/apimachinery/crd_watch.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]",
                "testname": "Custom Resource Definition, watch"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]",
                "testname": "Custom Resource Definition, discovery"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance]",
                "testname": "Custom Resource Definition, status sub-resource"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, list"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.17.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance]",
                "testname": "Custom Resource Definition, defaulting"
            },
            {
                "file": "test/e2e/apimachinery/custom_resource_definition.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance]",
                "testname": "Custom Resource Definition, create"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]",
                "testname": "Discovery, confirm the PreferredVersion for each api group"
            },
            {
                "file": "test/e2e/apimachinery/discovery.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]",
                "testname": "Discovery, confirm the groupVerion and a resourcefrom each apiGroup"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR no validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, unknown fields CR fails validation"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]",
                "testname": "Server side field validation, valid CR with validation schema"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]",
                "testname": "Server side field validation, CR duplicates"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed object"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]",
                "testname": "Server side field validation, unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/field_validation.go",
                "release": "1.27.0",
                "codename": "[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]",
                "testname": "Server side field validation, typed unknown metadata"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance]",
                "testname": "Priority and Fairness FlowSchema API"
            },
            {
                "file": "test/e2e/apimachinery/flowcontrol.go",
                "release": "1.29.0",
                "codename": "[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance]",
                "testname": "Priority and Fairness PriorityLevelConfiguration API"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apimachinery/server_version.go",
                "release": "1.19.0",
                "codename": "[sig-api-machinery] server version should find the server version [Conformance]",
                "testname": "Confirm a server version"
            },
            {
                "file": "test/e2e/apimachinery/table_conversion.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]",
                "testname": "API metadata HTTP return"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]",
                "testname": "CronJob Suspend"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]",
                "testname": "CronJob ForbidConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]",
                "testname": "CronJob ReplaceConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]",
                "testname": "CronJob AllowConcurrent"
            },
            {
                "file": "test/e2e/apps/cronjob.go",
                "release": "1.21.0",
                "codename": "[sig-apps] CronJob should support CronJob API operations [Conformance]",
                "testname": "CronJob API Operations"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support rollover [Conformance]",
                "testname": "Deployment Rollover"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment Recreate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]",
                "testname": "Deployment RollingUpdate"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.20.0",
                "codename": "[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]",
                "testname": "Deployment, completes the lifecycle of a Deployment"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.21.0",
                "codename": "[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]",
                "testname": "Deployment, completes the scaling of a Deployment subresource"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]",
                "testname": "Deployment, status sub-resource"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]",
                "testname": "PodDisruptionBudget: list and delete collection"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]",
                "testname": "PodDisruptionBudget: create, update, patch, and delete object"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]",
                "testname": "PodDisruptionBudget: Status updates"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.21.0",
                "codename": "[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]",
                "testname": "PodDisruptionBudget: update and patch status"
            },
            {
                "file": "test/e2e/apps/disruption.go",
                "release": "1.22.0",
                "codename": "[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]",
                "testname": "PodDisruptionBudget: block an eviction until the PDB is updated to allow it"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replace and Patch tests [Conformance]",
                "testname": "ReplicaSet, is created, Replaced and Patched"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.21.0",
                "codename": "[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]",
                "testname": "ReplicaSet, completes the scaling of a ReplicaSet subresource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]",
                "testname": "ReplicaSet, list and delete a collection of ReplicaSets"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]",
                "testname": "ReplicaSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/architecture/conformance.go",
                "release": "1.23.0",
                "codename": "[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]",
                "testname": "Conformance tests minimum number of nodes."
            },
            {
                "file": "test/e2e/auth/certificates.go",
                "release": "1.19.0",
                "codename": "[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]",
                "testname": "CertificateSigningRequest API"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.32.0",
                "codename": "[sig-auth] ServiceAccounts should create a serviceAccountToken and ensure a successful TokenReview [Conformance]",
                "testname": "ServiceAccount, create and review token"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance]",
                "testname": "Service account tokens auto mount optionally"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/auth/subjectreviews.go",
                "release": "1.27.0",
                "codename": "[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]",
                "testname": "SubjectReview, API Operations"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.14.0",
                "codename": "[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]",
                "testname": "ConfigMap, with empty-key"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]",
                "testname": "init-container-starts-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]",
                "testname": "init-container-starts-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartnever-pod"
            },
            {
                "file": "test/e2e/common/node/init_container.go",
                "release": "1.12.0",
                "codename": "[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]",
                "testname": "init-container-fails-stops-app-restartalways-pod"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, delete"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lease.go",
                "release": "1.17.0",
                "codename": "[sig-node] Lease lease API should be available [Conformance]",
                "testname": "lease API should be available"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.19.0",
                "codename": "[sig-node] Pods should delete a collection of pods [Conformance]",
                "testname": "Pods, delete a collection"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should delete a collection of pod templates [Conformance]",
                "testname": "PodTemplate, delete a collection"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the deleted RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]",
                "testname": "Pod with the non-existing RuntimeClass is rejected."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]",
                "testname": "Can schedule a pod requesting existing RuntimeClass."
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.20.0",
                "codename": "[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance]",
                "testname": "RuntimeClass API"
            },
            {
                "file": "test/e2e/common/node/runtimeclass.go",
                "release": "1.24.0",
                "codename": "[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]",
                "testname": "RuntimeClass Overhead field must be respected."
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.15.0",
                "codename": "[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]",
                "testname": "Secrets, with empty-key"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]",
                "testname": "Sysctls, reject invalid sysctls"
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.20.0",
                "codename": "[sig-instrumentation] Events should delete a collection of events [Conformance]",
                "testname": "Event, delete a collection"
            },
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should delete a collection of events [Conformance]",
                "testname": "New Event resource lifecycle, testing a list of events"
            },
            {
                "file": "test/e2e/instrumentation/events.go",
                "release": "1.19.0",
                "codename": "[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]",
                "testname": "New Event resource lifecycle, testing a single event"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]",
                "testname": "Kubectl, diff Deployment"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance]",
                "testname": "Kubectl, guestbook application"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance]",
                "testname": "Kubectl, check version v1"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance]",
                "testname": "Kubectl, cluster info"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance]",
                "testname": "Kubectl, describe pod or rc"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance]",
                "testname": "Kubectl, patch to annotate"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance]",
                "testname": "Kubectl, version"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance]",
                "testname": "Kubectl, replication controller"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance]",
                "testname": "Kubectl, scale replication controller"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/ingressclass.go",
                "release": "1.19.0",
                "codename": "[sig-network] IngressClass API should support creating IngressClass API operations [Conformance]",
                "testname": "IngressClass API"
            },
            {
                "file": "test/e2e/network/ingress.go",
                "release": "1.19.0",
                "codename": "[sig-network] Ingress API should support creating Ingress API operations [Conformance]",
                "testname": "Ingress API"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.9.0",
                "codename": "[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance]",
                "testname": "Proxy through apiserver to a Service"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support IPAddress API operations [Conformance]",
                "testname": "IPAddress API"
            },
            {
                "file": "test/e2e/network/service_cidrs.go",
                "release": "1.34.0",
                "codename": "[sig-network] ServiceCIDR and IPAddress API should support ServiceCIDR API operations [Conformance]",
                "testname": "ServiceCIDR API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.23.0",
                "codename": "[sig-network] Services should delete a collection of services [Conformance]",
                "testname": "Service, deletes a collection of services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/network/service_latency.go",
                "release": "1.9.0",
                "codename": "[sig-network] Service endpoints latency should not be very high [Conformance]",
                "testname": "Service endpoint latency, thresholds"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.28.0",
                "codename": "[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]",
                "testname": "CSIDriver, lifecycle"
            },
            {
                "file": "test/e2e/storage/csi_node.go",
                "release": "1.32.0",
                "codename": "[sig-storage] CSINodes CSI Conformance should run through the lifecycle of a csinode [Conformance]",
                "testname": "CSINode, lifecycle"
            },
            {
                "file": "test/e2e/storage/csistoragecapacity.go",
                "release": "1.24.0",
                "codename": "[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance]",
                "testname": "CSIStorageCapacity API"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            {
                "file": "test/e2e/storage/storageclass.go",
                "release": "1.29.0",
                "codename": "[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance]",
                "testname": "StorageClass, lifecycle"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.30.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should run through the lifecycle of a VolumeAttachment [Conformance]",
                "testname": "VolumeAttachment, lifecycle"
            },
            {
                "file": "test/e2e/storage/volume_attachment.go",
                "release": "1.32.0",
                "codename": "[sig-storage] VolumeAttachment Conformance should apply changes to a volumeattachment status [Conformance]",
                "testname": "VolumeAttachment, apply changes to a volumeattachment status"
            },
            {
                "file": "test/e2e/storage/volumeattributesclass.go",
                "release": "1.35.0",
                "codename": "[sig-storage] VolumeAttributesClass [FeatureGate:VolumeAttributesClass] should run through the lifecycle of a VolumeAttributesClass [Conformance]",
                "testname": "VolumeAttributesClass, lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.21.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]",
                "testname": "StatefulSet resource Replica scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]",
                "testname": "StatefulSet, list, patch and delete a collection of StatefulSets"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.22.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]",
                "testname": "StatefulSet, status sub-resource"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]",
                "testname": "StatefulSet, Burst Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]",
                "testname": "StatefulSet, Scaling"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update with Partition"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]",
                "testname": "StatefulSet, Rolling Update"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1PersistentVolume",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1PersistentVolumeClaimForAllNamespaces",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance]",
                "testname": "Scheduler, node selector not matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "listCoreV1PodForAllNamespaces",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1PodTemplateForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1ReplicationControllerForAllNamespaces",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            null
        ],
        "endpoint": "listCoreV1ResourceQuotaForAllNamespaces",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            null
        ],
        "endpoint": "listCoreV1SecretForAllNamespaces",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            null
        ],
        "endpoint": "listCoreV1ServiceAccountForAllNamespaces",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.18.0",
                "codename": "[sig-network] Services should find a service from listing all namespaces [Conformance]",
                "testname": "Find Kubernetes Service in default Namespace"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            null
        ],
        "endpoint": "listCoreV1ServiceForAllNamespaces",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            null
        ],
        "endpoint": "patchBatchV1NamespacedJob",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            }
        ],
        "endpoint": "patchBatchV1NamespacedJobStatus",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should allow expressions to refer variables. [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicy API operations [Conformance]",
                "testname": "ValidatingAdmissionPolicy API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should support ValidatingAdmissionPolicyBinding API operations [Conformance]",
                "testname": "ValidatingadmissionPolicyBinding API"
            },
            {
                "file": "test/e2e/apimachinery/validatingadmissionpolicy.go",
                "release": "1.30.0",
                "codename": "[sig-api-machinery] ValidatingAdmissionPolicy [Privileged:ClusterAdmin] should validate against a Deployment [Conformance]",
                "testname": "ValidatingAdmissionPolicy"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]",
                "testname": "Admission webhook, list mutating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]",
                "testname": "Admission webhook, list validating webhooks"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]",
                "testname": "Admission webhook, update mutating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]",
                "testname": "Admission webhook, update validating webhook"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]",
                "testname": "Admission webhook, deny custom resource create and delete"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]",
                "testname": "Admission webhook, deny custom resource definition"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]",
                "testname": "Admission webhook, honor timeout"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]",
                "testname": "Admission webhook, discovery document"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]",
                "testname": "Admission webhook, ordered mutation"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]",
                "testname": "Admission webhook, mutate custom resource"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]",
                "testname": "Admission webhook, mutate custom resource with different stored version"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]",
                "testname": "Admission webhook, mutate custom resource with pruning"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]",
                "testname": "Admission webhook, mutation with defaulting"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]",
                "testname": "Admission webhook, admission control not allowed on webhook configuration objects"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]",
                "testname": "Admission webhook, fail closed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update mutating webhook configurations with match conditions [Conformance]",
                "testname": "Mutating Admission webhook, create and update mutating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to create and update validating webhook configurations with match conditions [Conformance]",
                "testname": "Validating Admission webhook, create and update validating webhook configuration with matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate everything except 'skip-me' configmaps [Conformance]",
                "testname": "Mutating Admission webhook, mutating webhook excluding object with specific name"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject mutating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Mutating Admission webhook, reject mutating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.28.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should reject validating webhook configurations with invalid match conditions [Conformance]",
                "testname": "Validing Admission webhook, reject validating webhook configurations with invalid matchConditions"
            },
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            null
        ],
        "endpoint": "patchCoreV1Namespace",
        "tested_release": "1.10.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedConfigMap",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedEvent",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.26.0",
                "codename": "[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]",
                "testname": "LimitRange, list, patch and delete a LimitRange by collection"
            }
        ],
        "endpoint": "patchCoreV1NamespacedLimitRange",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedPersistentVolumeClaimStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
                "testname": "Garbage Collector, dependency cycle"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedPodStatus",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedReplicationController",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "patchCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedResourceQuota",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            }
        ],
        "endpoint": "patchCoreV1NamespacedResourceQuotaStatus",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedSecret",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedService",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            }
        ],
        "endpoint": "patchCoreV1NamespacedServiceAccount",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            null
        ],
        "endpoint": "patchCoreV1NamespacedServiceStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            }
        ],
        "endpoint": "patchCoreV1NamespaceStatus",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            null
        ],
        "endpoint": "patchCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "patchCoreV1NodeStatus",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "patchCoreV1PersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            }
        ],
        "endpoint": "patchCoreV1PersistentVolumeStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.15.0",
                "codename": "[sig-apps] Job should delete a job [Conformance]",
                "testname": "Jobs, active pods, graceful termination"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]",
                "testname": "Jobs, completion after task failure"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]",
                "testname": "Ensure Pods of an Indexed Job get a unique index."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.31.0",
                "codename": "[sig-apps] Job should allow to use the pod failure policy on exit code to fail the job early [Conformance]",
                "testname": "Verify Pod Failure policy allows to fail job early on exit code."
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should execute all indexes despite some failing when using backoffLimitPerIndex [Conformance]",
                "testname": "Ensure that all indexes are executed for an indexed job with backoffLimitPerIndex despite some failing"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should mark indexes as failed when the FailIndex action is matched in podFailurePolicy [Conformance]",
                "testname": "Mark indexes as failed when the FailIndex action is matched in podFailurePolicy"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job should terminate job execution when the number of failed indexes exceeds maxFailedIndexes [Conformance]",
                "testname": "Terminate job execution when the maxFailedIndexes is exceeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy should succeeded when all indexes succeeded [Conformance]",
                "testname": "Ensure that job with successPolicy succeeded when all indexes succeeded"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededCount rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededCount rule succeeded even when some indexes remain pending"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.33.0",
                "codename": "[sig-apps] Job with successPolicy succeededIndexes rule should succeeded even when some indexes remain pending [Conformance]",
                "testname": "Ensure that job with successPolicy succeededIndexes rule succeeded even when some indexes remain pending"
            },
            null
        ],
        "endpoint": "readBatchV1NamespacedJob",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            }
        ],
        "endpoint": "readBatchV1NamespacedJobStatus",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.18.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]",
                "testname": "Namespace patching"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            null
        ],
        "endpoint": "readCoreV1Namespace",
        "tested_release": "1.11.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.19.0",
                "codename": "[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]",
                "testname": "ConfigMap lifecycle"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            }
        ],
        "endpoint": "readCoreV1NamespacedEvent",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "readCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            }
        ],
        "endpoint": "readCoreV1NamespacedPersistentVolumeClaimStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-pods"
            },
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]",
                "testname": "Admission webhook, deny attach"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
                "testname": "Deployment RevisionHistoryLimit"
            },
            {
                "file": "test/e2e/apps/deployment.go",
                "release": "1.12.0",
                "codename": "[sig-apps] Deployment deployment should support proportional scaling [Conformance]",
                "testname": "Deployment Proportional Scaling"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.32.0",
                "codename": "[sig-apps] Job should allow to use a pod failure policy to ignore failure matching on DisruptionTarget condition [Conformance]",
                "testname": "Ensure pod failure policy allows to ignore failure matching on the DisruptionTarget condition"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]",
                "testname": "Replication Controller, adopt matching pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replication Controller, run basic image"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.9.0",
                "codename": "[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance]",
                "testname": "Replica Set, run basic image"
            },
            {
                "file": "test/e2e/apps/statefulset.go",
                "release": "1.9.0",
                "codename": "[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]",
                "testname": "StatefulSet, Recreate Failed Pod"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.18.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod udp"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/network/networking.go",
                "release": "1.9.0",
                "codename": "[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Networking, intra pod http, from node"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.18.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using tcp socket, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.23.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using grpc call, success"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, multiple restarts (slow)"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a exec \"cat /tmp/health\" liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using local file, no restart"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]",
                "testname": "Pod liveness probe, using http endpoint, failure"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, with initial delay"
            },
            {
                "file": "test/e2e/common/node/container_probe.go",
                "release": "1.9.0",
                "codename": "[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]",
                "testname": "Pod readiness probe, failure"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with absolute path"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath with backticks"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/kubelet_etc_hosts.go",
                "release": "1.9.0",
                "codename": "[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
                "testname": "Kubelet, managed etc hosts"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]",
                "testname": "Kubelet, failed pod, terminated reason"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, remote command execution over websocket"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.25.0",
                "codename": "[sig-node] Pods should patch a pod status [Conformance]",
                "testname": "Pods, patching status"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]",
                "testname": "Pods, lifecycle"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should get a host IP [NodeConformance] [Conformance]",
                "testname": "Pods, assigned hostip"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.13.0",
                "codename": "[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]",
                "testname": "Container Runtime, Restart Policy, Pod Phases"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from log output of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from file of succeeding container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessage, from container's log output of failing container"
            },
            {
                "file": "test/e2e/common/node/runtime.go",
                "release": "1.15.0",
                "codename": "[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]",
                "testname": "Container Runtime, TerminationMessagePath, non-root user and non-default path"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, runAsUser=65534"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]",
                "testname": "Security Context, readOnlyRootFilesystem=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.15.0",
                "codename": "[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]",
                "testname": "EmptyDir, Shared volumes between containers"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.19.0",
                "codename": "[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]",
                "testname": "Kubectl, server-side dry-run Pod"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance]",
                "testname": "Kubectl, label update"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance]",
                "testname": "Kubectl, replace"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance]",
                "testname": "Kubectl, run pod"
            },
            {
                "file": "test/e2e/kubectl/logs.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance]",
                "testname": "Kubectl, logs"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.14.0",
                "codename": "[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Hostname [Conformance]",
                "testname": "DNS, resolve the hostname"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should support configurable pod DNS nameservers [Conformance]",
                "testname": "DNS, custom dnsConfig"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for the cluster [Conformance]",
                "testname": "DNS, cluster"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple endpoint IPs specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, multiple IPs, multiple ports"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.34.0",
                "codename": "[sig-network] EndpointSlice should support a Service with multiple ports specified in multiple EndpointSlices [Conformance]",
                "testname": "EndpointSlice, single IP, multiple ports"
            },
            {
                "file": "test/e2e/network/hostport.go",
                "release": "1.21.0",
                "codename": "[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]",
                "testname": "Scheduling, HostPort matching and HostIP and Protocol not-matching"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.21.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]",
                "testname": "Proxy, validate ProxyWithPath responses"
            },
            {
                "file": "test/e2e/network/proxy.go",
                "release": "1.24.0",
                "codename": "[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]",
                "testname": "Proxy, validate Proxy responses"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to create a functioning NodePort service [Conformance]",
                "testname": "Service, NodePort Service"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve a basic endpoint from pods [Conformance]",
                "testname": "Service, endpoints"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should serve multiport endpoints from pods [Conformance]",
                "testname": "Service, endpoints with multiple ports"
            },
            {
                "file": "test/e2e/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]",
                "testname": "Pods, QOS"
            },
            {
                "file": "test/e2e/node/pre_stop.go",
                "release": "1.9.0",
                "codename": "[sig-node] PreStop should call prestop when killing a pod [Conformance]",
                "testname": "Pods, prestop hook"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            {
                "file": "test/e2e/storage/csi_inline.go",
                "release": "1.26.0",
                "codename": "[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]",
                "testname": "CSIInlineVolumes should support Pods with inline volumes"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]",
                "testname": "EmptyDir Wrapper Volume, Secret and ConfigMap volumes, no conflict"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]",
                "testname": "Garbage Collector, delete deployment,  propagation policy background"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]",
                "testname": "Garbage Collector, delete deployment, propagation policy orphan"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.20.0",
                "codename": "[sig-auth] ServiceAccounts should mount projected service account token [Conformance]",
                "testname": "TokenRequestProjection should mount a projected volume with token using TokenRequest API."
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]",
                "testname": "OIDC Discovery (ServiceAccountIssuerDiscovery)"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.34.0",
                "codename": "[sig-node] ConfigMap should be consumable as environment variable names with various prefixes [Conformance]",
                "testname": "ConfigMap, from environment field with various prefixes"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment field"
            },
            {
                "file": "test/e2e/common/node/configmap.go",
                "release": "1.9.0",
                "codename": "[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "ConfigMap, from environment variables"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]",
                "testname": "Containers, with arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]",
                "testname": "Containers, with command and arguments"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]",
                "testname": "Containers, with command"
            },
            {
                "file": "test/e2e/common/node/containers.go",
                "release": "1.9.0",
                "codename": "[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]",
                "testname": "Containers, without command and arguments"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.32.0",
                "codename": "[sig-node] Downward API should provide hostIPs as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for hostIPs"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for default CPU and memory limits and requests"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for host ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for name, namespace and ip"
            },
            {
                "file": "test/e2e/common/node/downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]",
                "testname": "DownwardAPI, environment for Pod UID"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.25.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]",
                "testname": "Ephemeral Container Creation"
            },
            {
                "file": "test/e2e/common/node/ephemeral_containers.go",
                "release": "1.28.0",
                "codename": "[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]",
                "testname": "Ephemeral Container, update ephemeral containers"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]",
                "testname": "Environment variables, expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]",
                "testname": "Environment variables, command argument expansion"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.9.0",
                "codename": "[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]",
                "testname": "Environment variables, command expansion"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]",
                "testname": "Kubelet, log output, default"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
                "testname": "Kubelet, hostAliases"
            },
            {
                "file": "test/e2e/common/node/kubelet.go",
                "release": "1.13.0",
                "codename": "[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Kubelet, pod with read only root file system"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, post start http hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop exec hook"
            },
            {
                "file": "test/e2e/common/node/lifecycle_hook.go",
                "release": "1.9.0",
                "codename": "[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]",
                "testname": "Pod Lifecycle, prestop http hook"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.13.0",
                "codename": "[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]",
                "testname": "Pods, logs from websockets"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]",
                "testname": "Pods, service environment variables"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.34.0",
                "codename": "[sig-node] Secrets should be consumable as environment variable names variable names with various prefixes [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment field"
            },
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.9.0",
                "codename": "[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]",
                "testname": "Secrets, pod environment from source"
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, privileged=false."
            },
            {
                "file": "test/e2e/common/node/security_context.go",
                "release": "1.15.0",
                "codename": "[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Security Context, allowPrivilegeEscalation=false."
            },
            {
                "file": "test/e2e/common/node/sysctl.go",
                "release": "1.21.0",
                "codename": "[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance]",
                "testname": "Sysctl, test sysctls"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, text data, binary data"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, without mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, volume mode set"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping, non-root user"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, with mapping"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, multiple volume maps"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limits"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory request"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, CPU limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, memory limit, default node allocatable"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, pod name"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, file mode 0400"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666,, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777, non-root user"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0644"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0666"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode 0777"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium default, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/empty_dir.go",
                "release": "1.9.0",
                "codename": "[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "EmptyDir, medium memory, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_combined.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, multiple projections"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped, non-root user"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, multiple volume paths"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limits"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory request"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, CPU limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, memory limit, node allocatable"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, pod name"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Project Volume, Secrets, non-root, custom fsGroup"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode default"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped"
            },
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, mapped, multiple paths"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode default, secret with same name in different namespace"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0440, fsGroup 1001 and uid 1000"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, default"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping, volume mode 0400"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, mapping multiple volume paths"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]",
                "testname": "DNS, resolve the subdomain"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.17.0",
                "codename": "[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]",
                "testname": "DNS, PQDN for services"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.9.0",
                "codename": "[sig-network] DNS should provide DNS for services [Conformance]",
                "testname": "DNS, services"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at container level"
            },
            {
                "file": "test/e2e/node/security_context.go",
                "release": "1.21.0",
                "codename": "[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]",
                "testname": "Security Context, test RunAsGroup at pod level"
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
                "testname": "SubPath: Reading content from a configmap volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]",
                "testname": "SubPath: Reading content from a downwardAPI volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]",
                "testname": "SubPath: Reading content from a projected volume."
            },
            {
                "file": "test/e2e/storage/subpath.go",
                "release": "1.12.0",
                "codename": "[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]",
                "testname": "SubPath: Reading content from a secret volume."
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedPodLog",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            }
        ],
        "endpoint": "readCoreV1NamespacedPodStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.19.0",
                "codename": "[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]",
                "testname": "PodTemplate lifecycle"
            },
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            }
        ],
        "endpoint": "readCoreV1NamespacedPodTemplate",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, after owned pods"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Serial] [Conformance]",
                "testname": "Garbage Collector, multiple owners"
            },
            {
                "file": "test/e2e/apimachinery/garbage_collector.go",
                "release": "1.9.0",
                "codename": "[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Serial] [Conformance]",
                "testname": "Garbage Collector, delete replication controller, propagation policy orphan"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.26.0",
                "codename": "[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]",
                "testname": "Replication Controller, get and update ReplicationController scale"
            },
            {
                "file": "test/e2e/storage/empty_dir_wrapper.go",
                "release": "1.13.0",
                "codename": "[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]",
                "testname": "EmptyDir Wrapper Volume, ConfigMap volumes, no race"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedReplicationController",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]",
                "testname": "ResourceQuota, object count quota, configmap"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicaSet"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]",
                "testname": "ResourceQuota, object count quota, replicationController"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]",
                "testname": "ResourceQuota, object count quota, secret"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]",
                "testname": "ResourceQuota, object count quota, service"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]",
                "testname": "ResourceQuota, object count quota, resourcequotas"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]",
                "testname": "ResourceQuota, quota scope, BestEffort and NotBestEffort scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]",
                "testname": "ResourceQuota, quota scope, Terminating and NotTerminating scope"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]",
                "testname": "ResourceQuota, manage lifecycle of a ResourceQuota"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedResourceQuota",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            }
        ],
        "endpoint": "readCoreV1NamespacedResourceQuotaStatus",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/secrets.go",
                "release": "1.18.0",
                "codename": "[sig-node] Secrets should patch a secret [Conformance]",
                "testname": "Secret patching"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedSecret",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]",
                "testname": "namespace-deletion-removes-services"
            },
            {
                "file": "test/e2e/kubectl/kubectl.go",
                "release": "1.9.0",
                "codename": "[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance]",
                "testname": "Kubectl, create service, replication controller"
            },
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/endpointslice.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]",
                "testname": "EndpointSlice API"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to ClientIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.9.0",
                "codename": "[sig-network] Services should provide secure master service [Conformance]",
                "testname": "Kubernetes Service"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedService",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.19.0",
                "codename": "[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]",
                "testname": "ServiceAccount lifecycle test"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            },
            null
        ],
        "endpoint": "readCoreV1NamespacedServiceAccount",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            }
        ],
        "endpoint": "readCoreV1NamespacedServiceStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            }
        ],
        "endpoint": "readCoreV1NamespaceStatus",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/controller_revision.go",
                "release": "1.25.0",
                "codename": "[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]",
                "testname": "ControllerRevision, resource lifecycle"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]",
                "testname": "DaemonSet-Rollback"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]",
                "testname": "DaemonSet-Creation"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]",
                "testname": "DaemonSet-RollingUpdate"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]",
                "testname": "DaemonSet, list and delete a collection of DaemonSets"
            },
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.22.0",
                "codename": "[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]",
                "testname": "DaemonSet, status sub-resource"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.9.0",
                "codename": "[sig-auth] ServiceAccounts should mount an API token into pods [Conformance]",
                "testname": "Service Account Tokens Must AutoMount"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]",
                "testname": "Pod Eviction, Toleration limits"
            },
            {
                "file": "test/e2e/node/taints.go",
                "release": "1.16.0",
                "codename": "[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]",
                "testname": "Taint, Pod Eviction on taint removal"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]",
                "testname": "Pod preemption verification"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]",
                "testname": "Scheduler, Basic Preemption"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.19.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]",
                "testname": "Scheduler, Preemption for critical pod"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.20.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]",
                "testname": "Scheduler, Verify PriorityClass endpoints"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "readCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "readCoreV1PersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            }
        ],
        "endpoint": "readCoreV1PersistentVolumeStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.25.0",
                "codename": "[sig-apps] Job should manage the lifecycle of a job [Conformance]",
                "testname": "Jobs, manage lifecycle"
            },
            null
        ],
        "endpoint": "replaceBatchV1NamespacedJob",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.24.0",
                "codename": "[sig-apps] Job should apply changes to a job status [Conformance]",
                "testname": "Jobs, apply changes to status"
            },
            null
        ],
        "endpoint": "replaceBatchV1NamespacedJobStatus",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]",
                "testname": "Namespace, apply update to a namespace"
            }
        ],
        "endpoint": "replaceCoreV1Namespace",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
                "testname": "watch-configmaps-closed-and-restarted"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]",
                "testname": "watch-configmaps-from-resource-version"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]",
                "testname": "watch-configmaps-with-multiple-watchers"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.11.0",
                "codename": "[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]",
                "testname": "watch-configmaps-label-changed"
            },
            {
                "file": "test/e2e/apimachinery/watch.go",
                "release": "1.15.0",
                "codename": "[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]",
                "testname": "watch-consistency"
            },
            {
                "file": "test/e2e/apimachinery/webhook.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]",
                "testname": "Admission webhook, deny create"
            },
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.21.0",
                "codename": "[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]",
                "testname": "RootCA ConfigMap test"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]",
                "testname": "ConfigMap Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/configmap_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "ConfigMap Volume, update"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, create, update and delete"
            },
            {
                "file": "test/e2e/common/storage/projected_configmap.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, ConfigMap, update"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedConfigMap",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/endpointslicemirroring.go",
                "release": "1.21.0",
                "codename": "[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]",
                "testname": "EndpointSlice Mirroring"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should test the lifecycle of an Endpoint [Conformance]",
                "testname": "Endpoint resource lifecycle"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedEndpoints",
        "tested_release": "1.19.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/instrumentation/core_events.go",
                "release": "1.25.0",
                "codename": "[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]",
                "testname": "Event, manage lifecycle of an Event"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedEvent",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/scheduling/limit_range.go",
                "release": "1.18.0",
                "codename": "[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]",
                "testname": "LimitRange, resources"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedLimitRange",
        "tested_release": "1.18.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedPersistentVolumeClaim",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedPersistentVolumeClaimStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.34.0",
                "codename": "[sig-api-machinery] OrderedNamespaceDeletion namespace deletion should delete pod first [Conformance]",
                "testname": "Ordered Namespace Deletion"
            },
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]",
                "testname": "ResourceQuota, object count quota, pod"
            },
            {
                "file": "test/e2e/apps/job.go",
                "release": "1.16.0",
                "codename": "[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]",
                "testname": "Jobs, orphan pods, re-adoption"
            },
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicationController should release no longer matching pods [Conformance]",
                "testname": "Replication Controller, release pods"
            },
            {
                "file": "test/e2e/apps/replica_set.go",
                "release": "1.13.0",
                "codename": "[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]",
                "testname": "Replica Set, adopt matching pods and release non matching pods"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should succeed in writing subpaths in container [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath test writes"
            },
            {
                "file": "test/e2e/common/node/expansion.go",
                "release": "1.19.0",
                "codename": "[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]",
                "testname": "VolumeSubpathEnvExpansion, subpath ready from failed state"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
                "testname": "Pods, ActiveDeadlineSeconds"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.9.0",
                "codename": "[sig-node] Pods should be updated [NodeConformance] [Conformance]",
                "testname": "Pods, update"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update annotations"
            },
            {
                "file": "test/e2e/common/storage/downwardapi_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]",
                "testname": "DownwardAPI volume, update label"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update annotation"
            },
            {
                "file": "test/e2e/common/storage/projected_downwardapi.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]",
                "testname": "Projected Volume, DownwardAPI, update labels"
            },
            {
                "file": "test/e2e/scheduling/preemption.go",
                "release": "1.31.0",
                "codename": "[sig-scheduling] SchedulerPreemption [Serial] validates pod disruption condition is added to the preempted pod [Conformance]",
                "testname": "Verify the DisruptionTarget condition is added to the preempted pod"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedPod",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]",
                "testname": "DaemonSet-FailedPodCreation"
            },
            {
                "file": "test/e2e/common/node/pods.go",
                "release": "1.20.0",
                "codename": "[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]",
                "testname": "Pods, completes the lifecycle of a Pod and the PodStatus"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedPodStatus",
        "tested_release": "1.10.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/node/podtemplates.go",
                "release": "1.24.0",
                "codename": "[sig-node] PodTemplates should replace a pod template [Conformance]",
                "testname": "PodTemplate, replace"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedPodTemplate",
        "tested_release": "1.24.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.15.0",
                "codename": "[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]",
                "testname": "Replication Controller, check for issues like exceeding allocated quota"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedReplicationController",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/rc.go",
                "release": "1.20.0",
                "codename": "[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]",
                "testname": "Replication Controller, lifecycle"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedReplicationControllerStatus",
        "tested_release": "1.20.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.16.0",
                "codename": "[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]",
                "testname": "ResourceQuota, update and delete"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedResourceQuota",
        "tested_release": "1.16.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/resource_quota.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]",
                "testname": "ResourceQuota, apply changes to a ResourceQuota status"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedResourceQuotaStatus",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/common/storage/projected_secret.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Projected Volume, Secrets, create, update delete"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.21.0",
                "codename": "[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]",
                "testname": "Secrets Volume, immutability"
            },
            {
                "file": "test/e2e/common/storage/secrets_volume.go",
                "release": "1.9.0",
                "codename": "[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]",
                "testname": "Secrets Volume, create, update and delete"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedSecret",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/dns.go",
                "release": "1.15.0",
                "codename": "[sig-network] DNS should provide DNS for ExternalName services [Conformance]",
                "testname": "DNS, for ExternalName Services"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]",
                "testname": "Service, change type, ClusterIP to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]",
                "testname": "Service, change type, ExternalName to ClusterIP"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]",
                "testname": "Service, change type, ExternalName to NodePort"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.16.0",
                "codename": "[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]",
                "testname": "Service, change type, NodePort to ExternalName"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]",
                "testname": "Service, NodePort type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.19.0",
                "codename": "[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]",
                "testname": "Service, ClusterIP type, session affinity to None"
            },
            {
                "file": "test/e2e/network/service.go",
                "release": "1.29.0",
                "codename": "[sig-network] Services should serve endpoints on same port and different protocols [Conformance]",
                "testname": "Service, should serve endpoints on same port and different protocols."
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespacedService",
        "tested_release": "1.15.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/auth/service_accounts.go",
                "release": "1.26.0",
                "codename": "[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]",
                "testname": "ServiceAccount, update a ServiceAccount"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedServiceAccount",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/network/service.go",
                "release": "1.21.0",
                "codename": "[sig-network] Services should complete a service status lifecycle [Conformance]",
                "testname": "Service, complete ServiceStatus lifecycle"
            }
        ],
        "endpoint": "replaceCoreV1NamespacedServiceStatus",
        "tested_release": "1.21.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.26.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]",
                "testname": "Namespace, apply finalizer to a namespace"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespaceFinalize",
        "tested_release": "1.26.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apimachinery/namespace.go",
                "release": "1.25.0",
                "codename": "[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]",
                "testname": "Namespace, apply changes to a namespace status"
            },
            null
        ],
        "endpoint": "replaceCoreV1NamespaceStatus",
        "tested_release": "1.25.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/apps/daemon_set.go",
                "release": "1.10.0",
                "codename": "[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]",
                "testname": "DaemonSet-NodeSelection"
            },
            {
                "file": "test/e2e/node/node_lifecycle.go",
                "release": "1.32.0",
                "codename": "[sig-node] Node Lifecycle should run through the lifecycle of a node [Conformance]",
                "testname": "Node, resource lifecycle"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.16.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]",
                "testname": "Scheduling, HostPort and Protocol match, HostIPs different but one is default HostIP (0.0.0.0)"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance]",
                "testname": "Scheduler, resource limits"
            },
            {
                "file": "test/e2e/scheduling/predicates.go",
                "release": "1.9.0",
                "codename": "[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance]",
                "testname": "Scheduler, node selector matching"
            },
            null
        ],
        "endpoint": "replaceCoreV1Node",
        "tested_release": "1.9.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance]",
                "testname": "PersistentVolumes(Claims), lifecycle"
            },
            null
        ],
        "endpoint": "replaceCoreV1PersistentVolume",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    },
    {
        "tests": [
            {
                "file": "test/e2e/storage/persistent_volumes.go",
                "release": "1.29.0",
                "codename": "[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance]",
                "testname": "PersistentVolumes(Claims), apply changes to a pv/pvc status"
            },
            null
        ],
        "endpoint": "replaceCoreV1PersistentVolumeStatus",
        "tested_release": "1.29.0",
        "promotion_release": "1.5.0"
    }
]
